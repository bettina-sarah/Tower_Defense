Index: Vue.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\n\r\nfrom tkinter import *\r\n\r\n\r\nclass Vue:\r\n    def __init__(self, parent, modele):\r\n        self.parent = parent\r\n        self.modele = modele\r\n        self.root = Tk()\r\n        self.root.geometry(\"1280x960\")  # 32x24 (x40) 24 = hauteur 32 = largeur\r\n        self.fenetre_largeur = 1280\r\n        self.fenetre_hauteur = 960\r\n        # self.create_canvases()\r\n        total_height = 960\r\n        canvas1_height = total_height/4 * 3 # 3/4 du ratio\r\n        self.canvas2_height = total_height/4  # 1/4\r\n        self.placement_tours = False\r\n        self.road_items = []\r\n\r\n        self.create_canvases(canvas1_height, self.canvas2_height)\r\n        self.creer_infos_joueur()\r\n        self.creer_menu_choix_tours()\r\n        self.create_troncons()\r\n        # self.create_events_amelioraton()\r\n        self.create_chateau_canvas()\r\n        self.placer_tour()\r\n\r\n    def placer_tour(self):\r\n        self.boutonTour1.bind(\"<Button-1>\", self.trigger_placement_tours)\r\n\r\n\r\n    def creer_tour(self, event):\r\n\r\n        rectangle_x = event.x + 20\r\n        rectangle_y = event.y\r\n\r\n        # Check if the rectangle would overlap with any part of the road\r\n        overlapping_items = self.canvas1.find_overlapping(rectangle_x, rectangle_y, rectangle_x + 40,\r\n                                                    rectangle_y + 45)\r\n\r\n        # If no overlap with road, place the rectangle\r\n        if not any(item in overlapping_items for item in self.road_items):\r\n            self.canvas1.create_rectangle(rectangle_x, rectangle_y, rectangle_x + 40,\r\n                                    rectangle_y + 45, fill=\"blue\")\r\n       \r\n\r\n\r\n\r\n    def trigger_placement_tours(self, event):\r\n        self.placement_tours = not self.placement_tours\r\n        if self.placement_tours == True:\r\n            self.canvas1.bind(\"<Button-1>\", self.creer_tour)\r\n\r\n\r\n    def creer_infos_joueur(self):\r\n\r\n        x = self.fenetre_largeur / 4\r\n        y = self.canvas2_height / 5\r\n\r\n        self.chronoLabel = Label(self.canvas2, text='Chrono',font=('Helvetica', 11), bg='white', width=5)\r\n        self.chrono = Label(self.canvas2, text=str(self.modele.chrono), font=('Helvetica', 11),bg='white', width=5)\r\n        self.canvas2.create_window(x / 2,y * 1 , anchor=\"center\", window=self.chronoLabel)\r\n        self.canvas2.create_window(x / 2, y * 2, anchor=\"center\", window=self.chrono)\r\n\r\n\r\n\r\n\r\n\r\n        self.vagueLabel = Label(self.canvas2, text='Vague', font=('Helvetica', 11), bg='white', width=5)\r\n        self.vague = Label(self.canvas2, text=str(self.modele.vague), font=('Helvetica', 11), bg='white', width=5)\r\n        self.canvas2.create_window(x / 2, y * 3, anchor=\"center\", window=self.vagueLabel)\r\n        self.canvas2.create_window(x / 2, y * 4, anchor=\"center\", window=self.vague)\r\n\r\n\r\n        self.nbVieLabel = Label(self.canvas2, text='Vies', font=('Helvetica', 11), bg='white', width=5)\r\n        self.nbVie = Label(self.canvas2, text=str(self.modele.nbVies), font=('Helvetica', 11), bg='white', width=5)\r\n        self.canvas2.create_window(x * 3.5, y * 1, anchor=\"center\", window=self.nbVieLabel)\r\n        self.canvas2.create_window(x * 3.5, y * 2, anchor=\"center\", window=self.nbVie)\r\n\r\n\r\n        self.argentLabel = Label(self.canvas2, text='Argent', font=('Helvetica', 11), bg='white',\r\n                                 width=5)\r\n        self.argent = Label(self.canvas2, text=str(self.modele.argent), font=('Helvetica', 11), bg='white',\r\n                                 width=5)\r\n\r\n        self.canvas2.create_window(x * 3.5, y * 3, anchor=\"center\", window=self.argentLabel)\r\n        self.canvas2.create_window(x * 3.5, y * 4, anchor=\"center\", window=self.argent)\r\n\r\n    def creer_menu_choix_tours(self):\r\n        x = self.fenetre_largeur / 4\r\n        y = self.canvas2_height / 5\r\n        self.titre_choix_tours = Label(self.canvas2, text='Choix des tours', font=('Helvetica', 11), fg='white', bg='black')\r\n        self.canvas2.create_window(x * 2, y/2, anchor=\"center\", window=self.titre_choix_tours)\r\n        self.boutonTour1 = Button(self.canvas2, text='Tour Projectile', font=('Helvetica', 11), bg='white', width=10, height=5)\r\n        self.canvas2.create_window(x*1.5, y * 2, anchor=\"center\", window=self.boutonTour1)\r\n        self.boutonTour1.config(bg='orange', fg='black')\r\n        self.boutonTour2 = Button(self.canvas2, text='Tour Eclair', font=('Helvetica', 11), bg='white', width=10,height=5)\r\n        self.canvas2.create_window(x*2, y * 2, anchor=\"center\", window=self.boutonTour2)\r\n        self.boutonTour2.config(bg='blue', fg='black')\r\n        self.boutonTour3 = Button(self.canvas2, text='Tour Poison', font=('Helvetica', 11), bg='white', width=10,height=5)\r\n        self.canvas2.create_window(x*2.5, y * 2, anchor=\"center\", window=self.boutonTour3)\r\n        self.boutonTour3.config(bg='green', fg='black')\r\n\r\n    def create_canvases(self, canvas1_height, canvas2_height):\r\n\r\n        self.canvas1 = tk.Canvas(self.root, bg='black', height=canvas1_height, width=1280)\r\n        print(canvas1_height)\r\n        #self.canvas1.grid(row=0, column=0, sticky=\"nsew\")\r\n\r\n\r\n        self.canvas2 = tk.Canvas(self.root, bg='red', height=canvas2_height, width=1280)\r\n        # self.canvas2.grid(row=1, column=0, sticky=\"nsew\") # nord sud est ouest donc il spread pour toucher a tous les bords du grid cell\r\n        self.canvas1.pack()\r\n        self.canvas2.pack()\r\n\r\n        # self.root.grid_rowconfigure(0, weight=3)  # Poids a chaque canvas\r\n        # self.root.grid_rowconfigure(1, weight=1)\r\n\r\n\r\n\r\n    def afficherChrono(self, time_left):\r\n        self.chrono.config(text=str(time_left))\r\n\r\n\r\n    def create_circle(self, x, y, canvas):  #Méthode pour créer un cercle prenant les coordonnés du centre et la rayon\r\n        r = 20 # test\r\n        x0 = x - r\r\n        y0 = y - r\r\n        x1 = x + r\r\n        y1 = y + r\r\n        return canvas.create_oval(x0, y0, x1, y1, fill = \"red3\", tags = (\"creep\",))\r\n\r\n    #Affichage des Creeps actifs sur le canvas. Utilise la méthode create_circle\r\n\r\n    def afficher_creeps(self):\r\n        self.canvas1.delete(\"creep\")\r\n        for i in self.modele.creeps_actifs:\r\n            self.create_circle(i.posX, i.posY, self.canvas1)\r\n\r\n\r\n    def create_troncons(self):\r\n        for i in self.modele.chemin.keys():\r\n            start_coord = self.modele.chemin[i][0]\r\n            end_coord = self.modele.chemin[i][1]\r\n            self.road_items.append(self.canvas1.create_line(start_coord, end_coord, fill = self.modele.troncon_couleur, width =70, capstyle=tk.ROUND, tags= (\"troncon\")))\r\n\r\n\r\n    def create_events_amelioraton(self):\r\n        # attacher event sur le label tower1:\r\n        self.tower1Label.bind(\"<Button-1>\", self.create_box_amelioration)\r\n\r\n    def create_box_amelioration(self, event):\r\n        self.create_box(self.start_x_position + 150, 15, self.start_x_position + 450, 125, \"Amélioration des tours\",\r\n                        self.choixTourTitreLabel)\r\n\r\n    def create_chateau_canvas(self):\r\n       # coinG_coords = self.modele.dict_pos_chateau['coinG']\r\n       # finG_coords = self.modele.dict_pos_chateau['finG']\r\n       # self.canvas1.create_rectangle(coinG_coords, finG_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       #\r\n       # coinD_coords = self.modele.dict_pos_chateau['coinD']\r\n       # finD_coords = self.modele.dict_pos_chateau['finD']\r\n       # self.canvas1.create_rectangle(coinD_coords,finD_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       # blocHG_coords = self.modele.dict_pos_chateau['blocHG']\r\n       # finHG_coords = self.modele.dict_pos_chateau['finHG']\r\n       # self.canvas1.create_rectangle(blocHG_coords,finHG_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       # blocHD_coords = self.modele.dict_pos_chateau['blocHD']\r\n       # finHD_coords = self.modele.dict_pos_chateau['finHD']\r\n       # self.canvas1.create_rectangle(blocHD_coords,finHD_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       # blocMG_coords = self.modele.dict_pos_chateau['blocMG']\r\n       # finMG_coords = self.modele.dict_pos_chateau['finMG']\r\n       # self.canvas1.create_rectangle(blocMG_coords,finMG_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       #\r\n       # blocMD_coords = self.modele.dict_pos_chateau['blocMD']\r\n       # finMD_coords = self.modele.dict_pos_chateau['finMD']\r\n       # self.canvas1.create_rectangle(blocMD_coords,finMD_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       # blocBG_coords = self.modele.dict_pos_chateau['blocBG']\r\n       # finBG_coords = self.modele.dict_pos_chateau['finBG']\r\n       # self.canvas1.create_rectangle(blocBG_coords,finBG_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n       #\r\n       # blocBD_coords = self.modele.dict_pos_chateau['blocBD']\r\n       # finBD_coords = self.modele.dict_pos_chateau['finBD']\r\n       #\r\n       # self.canvas1.create_rectangle(blocBD_coords,finBD_coords,\r\n       #                               fill=self.modele.chateau_couleur, tags=(\"troncon\",))\r\n        self.canvas1.create_rectangle(894,438,972,528,fill=self.modele.chateau_couleur)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Vue.py b/Vue.py
--- a/Vue.py	
+++ b/Vue.py	
@@ -28,6 +28,7 @@
 
     def placer_tour(self):
         self.boutonTour1.bind("<Button-1>", self.trigger_placement_tours)
+        
 
 
     def creer_tour(self, event):
Index: ../questions.txt
===================================================================
diff --git a/../questions.txt b/../questions.txt
deleted file mode 100644
--- a/../questions.txt	
+++ /dev/null	
@@ -1,11 +0,0 @@
-1. CHRONO: 
--aucune fonc avant mainloop
- - tout dans controleur qui parle au modele & vue?
-chrono --
--while loop, after cancel, chrono redevient 10
-
-2. details canvas: height width - modele?
-
-3. argent & vies - info modele - changé labels
-
-4. Frame?
\ No newline at end of file
